language: node_js
node_js:
  - stable
branches:
  only:
    - master
    - /^release\/.*$/

variables:
  AWS_ENV: mccsbx # this should be used to look up SVC_ROLE_{AWS_ENV}_ARN variable from protect
                  # which points to the ROLE_ARN below

cache:
  directories:
    - node_modules
install:
  - pip install awscli --user
  - npm install

.setup_role_script: &setup_role
  - echo "============== SETUP ASSUME ROLE =============="
  - aws sts get-caller-identity
  - echo $AWS_ENV
  #- KST=($(aws sts assume-role --role-arn $ROLE_ARN --role-session-name "gitlab-ci-${CI_COMMIT_SHA}" --query '[Credentials.AccessKeyId, Credentials.SecretAccessKey, Credentials.SessionToken]' --output text))
  - KST=$(aws sts assume-role --role-arn SVC_ROLE_${AWS_ENV}_ARN --role-session-name "gitlab-ci-${CI_COMMIT_SHA}" )
  - export AWS_ACCESS_KEY_ID=$(echo $KST| jq -r '.Credentials.AccessKeyId')
  - export AWS_SECRET_ACCESS_KEY=$(echo $KST| jq -r '.Credentials.SecretAccessKey')
  - export AWS_SESSION_TOKEN=$(echo $KST| jq -r '.Credentials.SessionToken')
  - export AWS_SECURITY_TOKEN=${AWS_SESSION_TOKEN}
  - aws sts get-caller-identity


script:
  # pull from Outputs[] where OutputKey = outputbucket or all expoerts for jonessite-bucket
  - *setup_role
  - echo "Begin Deployment for S3 artifacts"
  - STACK_NAME=jonessite
  - BUCKET=$(aws cloudformation --region us-east-1 describe-stacks --stack-name ${STACK_NAME} --query 'Stacks[0].Outputs[?OutputKey==`outputbucket`].OutputValue' --output text)
  - OAI=$(aws cloudformation --region us-east-1 describe-stacks --stack-name ${STACK_NAME} --query 'Stacks[0].Outputs[?OutputKey==`outputoai`].OutputValue' --output text)
  #- BUCKET=$(aws cloudformation --region us-east-1 describe-stacks --stack-name jonessite | jq '.Stacks[0].Outputs[0].OutputValue')
  - echo $BUCKET
  - aws sts get-caller-identity
  - npm run build
  #- aws s3 sync ./build s3://${BUCKET}/ --delete --grants read=id=${OAI}
  - aws s3 sync build/ s3://${BUCKET}/ --delete
  - aws s3 cp build/index.html s3://${BUCKET}/index.html --metadata-directive REPLACE --cache-control no-cache,no-store,max-age=0

# deploy:
#   provider: pages
#   skip_cleanup: true
#   github_token: $github_token
#   local_dir: build
#   on:
#     branch: master


# deploy:
#   provider: s3
#   bucket:
#   on:
#     branch: master


notifications:
  email:
    on_failure: always
